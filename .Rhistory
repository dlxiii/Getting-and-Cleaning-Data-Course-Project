paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[10000]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar= 2, norf = NA)
vect
names(vect)
vect2 <-c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect , vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20,nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients<-c('Bill', 'Gina', 'Kelly', 'Sean')
cbind(patients vector,my_matrix)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(TRUE, FALSE, TRUE))
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(1.4, 3.6, 7.9, 8.8))
sd(1.4, 3.6, 7.9, 8.8)
SD(1.4, 3.6, 7.9, 8.8)
sd(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[-1]},c(8, 4, 0))
paste
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Good", "morning")
submit()
submit()
submit()
mad_libs(1,2,3)
submit()
'I'%p% 'love'%p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
1989-06-26
d1
d2 <- Date("1969-01-01")
d2 <- as.Date("1969-01-01")
d2
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
# Format number with fixed width and then append .csv to number
fileNames <- paste0(directory, '/', formatC(id, width=3, flag="0"), ".csv" )
# Reading in all files and making a large data.table
lst <- lapply(fileNames, data.table::fread)
dt <- rbindlist(lst)
if (c(pollutant) %in% names(dt)){
return(dt[, lapply(.SD, mean, na.rm = TRUE), .SDcols = pollutant][[1]])
}
}
pollutantmean(directory = '~/Downloads/specdata', pollutant = 'sulfate', id = 1:10)
pollutantmean(directory = '~/Downloads/specdata', pollutant = 'sulfate', id = 1)
install.packages(c("nlme", "survival"))
install.packages("data.table")
library(data.table)
pollutantmean(directory = '~/Downloads/specdata', pollutant = 'sulfate', id = 1)
pollutantmean(directory = '~/Downloads/specdata', pollutant = 'sulfate', id = 1:10)
pollutantmean(directory = '~/Downloads/specdata', "nitrate", 70:72)
pollutantmean(directory = '~/Downloads/specdata', "sulfate", 34)
pollutantmean(directory = '~/Downloads/specdata', "nitrate")
cc <- complete(directory = '~/Downloads/specdata', c(6, 10, 20, 34, 100, 200, 310))
complete <- function(directory,  id = 1:332) {
# Format number with fixed width and then append .csv to number
fileNames <- paste0(directory, '/', formatC(id, width=3, flag="0"), ".csv" )
# Reading in all files and making a large data.table
lst <- lapply(fileNames, data.table::fread)
dt <- rbindlist(lst)
return(dt[complete.cases(dt), .(nobs = .N), by = ID])
}
cc <- complete('~/Downloads/specdata', c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete('~/Downloads/specdata', 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete('~/Downloads/specdata', 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
RNGversion("3.5.1")
set.seed(42)
RNGversion("3.5.1")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_colors,min,max)
lapply(flag_colors,min)
lapply(flag_colors,max)
lapply(flag_colors,range())
lapply(flag_colors,range(flag_colors))
range(lapply(flag_colors))
lapply(flag_colors,range(flag_colors))
range(flag_colors)
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags)
unique_vals<-lapply(flag_shapes, range)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(flag_shapes, length)
sapply(flag_shapes, length)
lapply(flag_shapes, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
View(flags)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
force(iris)
View(iris)
mean(iris['Sepal.Length'])
mean.default(iris['Sepal.Length'])
?mean
tapply(iris$population, summary)
tapply(iris$Sepal.Length, summary)
tapply(iris$Sepal.Length, iris$Species, summary)
apply(iris,[,1:4],1,mean)
apply(iris,2,mean)
colMeans(iris)
apply(iris,[,1:4],2,mean)
apply(iris,2,mean)
apply(iris,1,mean)
rowMeans(iris,[,1:4])
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
force(mtcars)
View(mtcars)
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
res <- sapply(split(mtcars$mpg,mtcars$cyl),mean)
res[1]-res[3]
debug(ls)
?ls
ls
ls
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
undebug(ls)
undebug(ls)
undebug(ls)
swirl()
Q
swirl()
View(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = F)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(100,0:1,prob = c(0.3, 0.7))
flips<-sample(100,0:1,prob = c(0.3, 0.7))
flips<-sample(0:1,100,prob = c(0.3, 0.7))
flips<-sample(0:1,100,replace = TRUE,prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace =TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace =TRUE, prob = c(0.3, 0.7))
flips2 <- rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(n=100, size=1,prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,lambda=10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cats)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(data = mtcars,formula = mpg ~ cyl)
boxplot(data = mtcars)
View(mtcars)
View(mtcars)
boxplot(data = mtcars,x='cyl',y='mpg')
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
pwd
getwd
ls
ls()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
getwd()
setwd('Downloads/rprog_data_ProgAssignment3-data/')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
View(outcome)
View(outcome)
best("SC", "heart attack")
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
source("best.R")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm('mydf')
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran,-5:20)
select(cran)
-5:20
5:20
-(5:20)
select(cran,-(5:20))
select(cran)
select(cran,-(1:20))
select(cran,-(1:2))
select(cran,-(1:11))
select(cran,-(1:11))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na())
filter(cran,
0)
filter(cran)
filter(cran, !is.na(r_version))
cran2<-select(cran)
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2,country (ascending),r_version (descending),ip_id (ascending))
arrange(cran2,package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran,ip_id, package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
avg_bytes<-summarize(cran, avg_bytes= mean(size))
summarize(cran, avg_bytes = mean(size))
setwd(/Users/yulong/GitHub/Getting-and-Cleaning-Data-Course-Project)
setwd('/Users/yulong/GitHub/Getting-and-Cleaning-Data-Course-Project')
unzip(zipfile = "dataFiles.zip")
unzip(zipfile = "UCI HAR Dataset.zip")
# unzip(zipfile = "UCI HAR Dataset.zip")
source("~/GitHub/Getting-and-Cleaning-Data-Course-Project/run_analysis.R")
source("~/GitHub/Getting-and-Cleaning-Data-Course-Project/run_analysis.R")
source("~/GitHub/Getting-and-Cleaning-Data-Course-Project/run_analysis.R")
